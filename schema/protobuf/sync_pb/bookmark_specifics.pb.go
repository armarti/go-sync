// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bookmark_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Corresponds to a single meta info key/value pair for a bookmark node.
type MetaInfo struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaInfo) Reset()         { *m = MetaInfo{} }
func (m *MetaInfo) String() string { return proto.CompactTextString(m) }
func (*MetaInfo) ProtoMessage()    {}
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_18b074d681efa94e, []int{0}
}

func (m *MetaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaInfo.Unmarshal(m, b)
}
func (m *MetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaInfo.Marshal(b, m, deterministic)
}
func (m *MetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaInfo.Merge(m, src)
}
func (m *MetaInfo) XXX_Size() int {
	return xxx_messageInfo_MetaInfo.Size(m)
}
func (m *MetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MetaInfo proto.InternalMessageInfo

func (m *MetaInfo) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MetaInfo) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Properties of bookmark sync objects.
type BookmarkSpecifics struct {
	Url     *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Favicon []byte  `protobuf:"bytes,2,opt,name=favicon" json:"favicon,omitempty"`
	// Contains legacy title which is truncated and may contain escaped symbols.
	LegacyCanonicalizedTitle *string `protobuf:"bytes,3,opt,name=legacy_canonicalized_title,json=legacyCanonicalizedTitle" json:"legacy_canonicalized_title,omitempty"`
	// Corresponds to BookmarkNode::date_added() represented as microseconds since
	// the Windows epoch.
	CreationTimeUs *int64      `protobuf:"varint,4,opt,name=creation_time_us,json=creationTimeUs" json:"creation_time_us,omitempty"`
	IconUrl        *string     `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	MetaInfo       []*MetaInfo `protobuf:"bytes,6,rep,name=meta_info,json=metaInfo" json:"meta_info,omitempty"`
	// Introduced in M81, it represents a globally unique and immutable ID.
	//
	// If present, it must be the same as originator_client_item_id in lowercase,
	// unless originator client item ID is not a valid GUID. In such cases (which
	// is the case for bookmarks created before 2015), this GUID must match the
	// value inferred from the combination of originator cache GUID and
	// originator client item ID, see InferGuidForLegacyBookmark().
	//
	// If not present, the value can be safely inferred using the very same
	// methods listed above.
	Guid *string `protobuf:"bytes,10,opt,name=guid" json:"guid,omitempty"`
	// Contains full title as is. |legacy_canonicalized_title| is a prefix of
	// |full_title| with escaped symbols.
	FullTitle            *string  `protobuf:"bytes,11,opt,name=full_title,json=fullTitle" json:"full_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookmarkSpecifics) Reset()         { *m = BookmarkSpecifics{} }
func (m *BookmarkSpecifics) String() string { return proto.CompactTextString(m) }
func (*BookmarkSpecifics) ProtoMessage()    {}
func (*BookmarkSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_18b074d681efa94e, []int{1}
}

func (m *BookmarkSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookmarkSpecifics.Unmarshal(m, b)
}
func (m *BookmarkSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookmarkSpecifics.Marshal(b, m, deterministic)
}
func (m *BookmarkSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookmarkSpecifics.Merge(m, src)
}
func (m *BookmarkSpecifics) XXX_Size() int {
	return xxx_messageInfo_BookmarkSpecifics.Size(m)
}
func (m *BookmarkSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_BookmarkSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_BookmarkSpecifics proto.InternalMessageInfo

func (m *BookmarkSpecifics) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *BookmarkSpecifics) GetFavicon() []byte {
	if m != nil {
		return m.Favicon
	}
	return nil
}

func (m *BookmarkSpecifics) GetLegacyCanonicalizedTitle() string {
	if m != nil && m.LegacyCanonicalizedTitle != nil {
		return *m.LegacyCanonicalizedTitle
	}
	return ""
}

func (m *BookmarkSpecifics) GetCreationTimeUs() int64 {
	if m != nil && m.CreationTimeUs != nil {
		return *m.CreationTimeUs
	}
	return 0
}

func (m *BookmarkSpecifics) GetIconUrl() string {
	if m != nil && m.IconUrl != nil {
		return *m.IconUrl
	}
	return ""
}

func (m *BookmarkSpecifics) GetMetaInfo() []*MetaInfo {
	if m != nil {
		return m.MetaInfo
	}
	return nil
}

func (m *BookmarkSpecifics) GetGuid() string {
	if m != nil && m.Guid != nil {
		return *m.Guid
	}
	return ""
}

func (m *BookmarkSpecifics) GetFullTitle() string {
	if m != nil && m.FullTitle != nil {
		return *m.FullTitle
	}
	return ""
}

func init() {
	proto.RegisterType((*MetaInfo)(nil), "sync_pb.MetaInfo")
	proto.RegisterType((*BookmarkSpecifics)(nil), "sync_pb.BookmarkSpecifics")
}

func init() {
	proto.RegisterFile("bookmark_specifics.proto", fileDescriptor_18b074d681efa94e)
}

var fileDescriptor_18b074d681efa94e = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0x4d, 0x6b, 0xe3, 0x30,
	0x14, 0xc4, 0xb1, 0xb3, 0x96, 0x5f, 0x96, 0xc5, 0x11, 0x7b, 0xd0, 0x2e, 0x14, 0x42, 0xa0, 0x60,
	0x28, 0xf8, 0x90, 0x73, 0x4f, 0xe9, 0xa5, 0x0d, 0x14, 0x8a, 0x9b, 0x9c, 0x85, 0xa2, 0xc8, 0xa9,
	0x88, 0x3e, 0x8c, 0x2c, 0x07, 0xd2, 0x3f, 0xd6, 0xbf, 0x57, 0xa4, 0xc4, 0xd0, 0x9b, 0x66, 0xde,
	0x9b, 0x79, 0xc3, 0x08, 0xc8, 0xde, 0xda, 0x93, 0x66, 0xee, 0x44, 0xfb, 0x4e, 0x70, 0xd9, 0x4a,
	0xde, 0xd7, 0x9d, 0xb3, 0xde, 0xe2, 0xbc, 0xbf, 0x18, 0x4e, 0xbb, 0xfd, 0x72, 0x05, 0xe8, 0x55,
	0x78, 0xf6, 0x62, 0x5a, 0x8b, 0x4b, 0x48, 0x4f, 0xe2, 0x42, 0x92, 0x45, 0x52, 0x15, 0x4d, 0x78,
	0xe2, 0xbf, 0x30, 0x3d, 0x33, 0x35, 0x08, 0x32, 0x89, 0xdc, 0x15, 0x2c, 0xbf, 0x26, 0x30, 0x5f,
	0xdf, 0x9c, 0xdf, 0x47, 0xe3, 0xa0, 0x1e, 0x9c, 0x1a, 0xd5, 0x83, 0x53, 0x98, 0x40, 0xde, 0xb2,
	0xb3, 0xe4, 0xd6, 0x44, 0xfd, 0xef, 0x66, 0x84, 0xf8, 0x11, 0xfe, 0x2b, 0x71, 0x64, 0xfc, 0x42,
	0x39, 0x33, 0xd6, 0x48, 0xce, 0x94, 0xfc, 0x14, 0x07, 0xea, 0xa5, 0x57, 0x82, 0xa4, 0xd1, 0x82,
	0x5c, 0x37, 0x9e, 0x7e, 0x2e, 0x6c, 0xc3, 0x1c, 0x57, 0x50, 0x72, 0x27, 0x98, 0x97, 0xd6, 0x50,
	0x2f, 0xb5, 0xa0, 0x43, 0x4f, 0xb2, 0x45, 0x52, 0xa5, 0xcd, 0x9f, 0x91, 0xdf, 0x4a, 0x2d, 0x76,
	0x3d, 0xfe, 0x07, 0x28, 0xdc, 0xa3, 0x21, 0xd8, 0x34, 0xba, 0xe6, 0x01, 0xef, 0x9c, 0xc2, 0x35,
	0x14, 0x5a, 0x78, 0x46, 0xa5, 0x69, 0x2d, 0xf9, 0xb5, 0x48, 0xab, 0xd9, 0x6a, 0x5e, 0xdf, 0x5a,
	0xa9, 0xc7, 0x4a, 0x1a, 0xa4, 0xc7, 0x72, 0x30, 0x64, 0xc7, 0x41, 0x1e, 0x08, 0x44, 0x9b, 0xf8,
	0xc6, 0x77, 0x00, 0xed, 0xa0, 0xd4, 0x2d, 0xf6, 0x2c, 0x4e, 0x8a, 0xc0, 0xc4, 0x9c, 0x9b, 0x0c,
	0xe5, 0x25, 0xda, 0x64, 0x08, 0x95, 0xc5, 0x26, 0x43, 0x45, 0x09, 0xeb, 0x07, 0xb8, 0xb7, 0xee,
	0x58, 0xf3, 0x0f, 0x67, 0xb5, 0x1c, 0x74, 0xcd, 0xad, 0xee, 0xac, 0x11, 0xc6, 0xf7, 0xf1, 0xf4,
	0xf5, 0x73, 0xb8, 0x55, 0xcf, 0xe9, 0x5b, 0xf2, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x28, 0x30,
	0x40, 0xbe, 0x01, 0x00, 0x00,
}
