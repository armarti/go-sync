// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device_info_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Enum defining available Sharing features.
type SharingSpecificFields_EnabledFeatures int32

const (
	SharingSpecificFields_UNKNOWN SharingSpecificFields_EnabledFeatures = 0
	// Supports Click to Call only via VAPID.
	SharingSpecificFields_CLICK_TO_CALL_VAPID SharingSpecificFields_EnabledFeatures = 1
	// Supports Shared Clipboard only via VAPID.
	SharingSpecificFields_SHARED_CLIPBOARD_VAPID SharingSpecificFields_EnabledFeatures = 2
	SharingSpecificFields_SMS_FETCHER            SharingSpecificFields_EnabledFeatures = 3
	SharingSpecificFields_REMOTE_COPY            SharingSpecificFields_EnabledFeatures = 4
	SharingSpecificFields_PEER_CONNECTION        SharingSpecificFields_EnabledFeatures = 5
	SharingSpecificFields_DISCOVERY              SharingSpecificFields_EnabledFeatures = 6
	// Suppots Click to Call via both VAPID and sender ID.
	SharingSpecificFields_CLICK_TO_CALL_V2 SharingSpecificFields_EnabledFeatures = 7
	// Suppots Shared Clipboard via both VAPID and sender ID.
	SharingSpecificFields_SHARED_CLIPBOARD_V2 SharingSpecificFields_EnabledFeatures = 8
)

var SharingSpecificFields_EnabledFeatures_name = map[int32]string{
	0: "UNKNOWN",
	1: "CLICK_TO_CALL_VAPID",
	2: "SHARED_CLIPBOARD_VAPID",
	3: "SMS_FETCHER",
	4: "REMOTE_COPY",
	5: "PEER_CONNECTION",
	6: "DISCOVERY",
	7: "CLICK_TO_CALL_V2",
	8: "SHARED_CLIPBOARD_V2",
}

var SharingSpecificFields_EnabledFeatures_value = map[string]int32{
	"UNKNOWN":                0,
	"CLICK_TO_CALL_VAPID":    1,
	"SHARED_CLIPBOARD_VAPID": 2,
	"SMS_FETCHER":            3,
	"REMOTE_COPY":            4,
	"PEER_CONNECTION":        5,
	"DISCOVERY":              6,
	"CLICK_TO_CALL_V2":       7,
	"SHARED_CLIPBOARD_V2":    8,
}

func (x SharingSpecificFields_EnabledFeatures) Enum() *SharingSpecificFields_EnabledFeatures {
	p := new(SharingSpecificFields_EnabledFeatures)
	*p = x
	return p
}

func (x SharingSpecificFields_EnabledFeatures) String() string {
	return proto.EnumName(SharingSpecificFields_EnabledFeatures_name, int32(x))
}

func (x *SharingSpecificFields_EnabledFeatures) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SharingSpecificFields_EnabledFeatures_value, data, "SharingSpecificFields_EnabledFeatures")
	if err != nil {
		return err
	}
	*x = SharingSpecificFields_EnabledFeatures(value)
	return nil
}

func (SharingSpecificFields_EnabledFeatures) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_199d98dfb54dc818, []int{2, 0}
}

// Information about a device that is running a sync-enabled Chrome browser.  We
// are mapping the per-client cache guid to more specific information about the
// device.
type DeviceInfoSpecifics struct {
	// The cache_guid created to identify a sync client on this device.
	CacheGuid *string `protobuf:"bytes,1,opt,name=cache_guid,json=cacheGuid" json:"cache_guid,omitempty"`
	// A non-unique but human readable name to describe this client.
	ClientName *string `protobuf:"bytes,2,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	// The platform of the device.
	DeviceType *SyncEnums_DeviceType `protobuf:"varint,3,opt,name=device_type,json=deviceType,enum=sync_pb.SyncEnums_DeviceType" json:"device_type,omitempty"`
	// The UserAgent used when contacting the Chrome Sync server.
	SyncUserAgent *string `protobuf:"bytes,4,opt,name=sync_user_agent,json=syncUserAgent" json:"sync_user_agent,omitempty"`
	// The Chrome instance's version.  Updated (if necessary) on every startup.
	ChromeVersion *string `protobuf:"bytes,5,opt,name=chrome_version,json=chromeVersion" json:"chrome_version,omitempty"`
	// Last time when pre-sync data on the device was saved. The device can be
	// restored to state back to this time. In millisecond since UNIX epoch.
	// DEPRECATED in M50.
	DeprecatedBackupTimestamp *int64 `protobuf:"varint,6,opt,name=deprecated_backup_timestamp,json=deprecatedBackupTimestamp" json:"deprecated_backup_timestamp,omitempty"` // Deprecated: Do not use.
	// Device_id that is stable until user signs out. This device_id is used for
	// annotating login scoped refresh token.
	SigninScopedDeviceId *string `protobuf:"bytes,7,opt,name=signin_scoped_device_id,json=signinScopedDeviceId" json:"signin_scoped_device_id,omitempty"`
	// This field is updated to be the current time periodically, and is also set
	// to the current time whenever another field changes. By examining the
	// difference between this field and the current time, it should be possible
	// to reason about the inactivity of any device that was syncing at one time.
	LastUpdatedTimestamp *int64 `protobuf:"varint,8,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp" json:"last_updated_timestamp,omitempty"`
	// Device info fields that are specific to a feature. This is information that
	// can not be derived from the other fields in the proto and are not general
	// enough to be used by another feature.
	FeatureFields *FeatureSpecificFields `protobuf:"bytes,9,opt,name=feature_fields,json=featureFields" json:"feature_fields,omitempty"`
	// Device specific information for Sharing feature.
	SharingFields *SharingSpecificFields `protobuf:"bytes,10,opt,name=sharing_fields,json=sharingFields" json:"sharing_fields,omitempty"`
	// Model of device.
	Model *string `protobuf:"bytes,11,opt,name=model" json:"model,omitempty"`
	// Name of device manufacturer.
	Manufacturer *string `protobuf:"bytes,12,opt,name=manufacturer" json:"manufacturer,omitempty"`
	// The interval in minutes with which |last_updated_timestamp| is updated to
	// the sync servers if online and while sync is actively running (e.g.
	// excludes backgrounded apps on Android). Introduced in M81. The legacy
	// default was 1 day.
	PulseIntervalInMinutes *int32   `protobuf:"varint,13,opt,name=pulse_interval_in_minutes,json=pulseIntervalInMinutes" json:"pulse_interval_in_minutes,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *DeviceInfoSpecifics) Reset()         { *m = DeviceInfoSpecifics{} }
func (m *DeviceInfoSpecifics) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoSpecifics) ProtoMessage()    {}
func (*DeviceInfoSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_199d98dfb54dc818, []int{0}
}

func (m *DeviceInfoSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfoSpecifics.Unmarshal(m, b)
}
func (m *DeviceInfoSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfoSpecifics.Marshal(b, m, deterministic)
}
func (m *DeviceInfoSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfoSpecifics.Merge(m, src)
}
func (m *DeviceInfoSpecifics) XXX_Size() int {
	return xxx_messageInfo_DeviceInfoSpecifics.Size(m)
}
func (m *DeviceInfoSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfoSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfoSpecifics proto.InternalMessageInfo

func (m *DeviceInfoSpecifics) GetCacheGuid() string {
	if m != nil && m.CacheGuid != nil {
		return *m.CacheGuid
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetDeviceType() SyncEnums_DeviceType {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return SyncEnums_TYPE_UNSET
}

func (m *DeviceInfoSpecifics) GetSyncUserAgent() string {
	if m != nil && m.SyncUserAgent != nil {
		return *m.SyncUserAgent
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetChromeVersion() string {
	if m != nil && m.ChromeVersion != nil {
		return *m.ChromeVersion
	}
	return ""
}

// Deprecated: Do not use.
func (m *DeviceInfoSpecifics) GetDeprecatedBackupTimestamp() int64 {
	if m != nil && m.DeprecatedBackupTimestamp != nil {
		return *m.DeprecatedBackupTimestamp
	}
	return 0
}

func (m *DeviceInfoSpecifics) GetSigninScopedDeviceId() string {
	if m != nil && m.SigninScopedDeviceId != nil {
		return *m.SigninScopedDeviceId
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetLastUpdatedTimestamp() int64 {
	if m != nil && m.LastUpdatedTimestamp != nil {
		return *m.LastUpdatedTimestamp
	}
	return 0
}

func (m *DeviceInfoSpecifics) GetFeatureFields() *FeatureSpecificFields {
	if m != nil {
		return m.FeatureFields
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetSharingFields() *SharingSpecificFields {
	if m != nil {
		return m.SharingFields
	}
	return nil
}

func (m *DeviceInfoSpecifics) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetManufacturer() string {
	if m != nil && m.Manufacturer != nil {
		return *m.Manufacturer
	}
	return ""
}

func (m *DeviceInfoSpecifics) GetPulseIntervalInMinutes() int32 {
	if m != nil && m.PulseIntervalInMinutes != nil {
		return *m.PulseIntervalInMinutes
	}
	return 0
}

// Feature specific information about the device that is running a sync-enabled
// Chrome browser. Adding to this proto is discouraged and should only be added
// when the information can not be derived more generally.
type FeatureSpecificFields struct {
	// Tracks whether the SendTabToSelf feature is enabled on the device. For this
	// to be true, two things must be true: (1) The receiving side of the feature
	// must be enabled on the device (2) The user has enabled sync for this
	// feature
	SendTabToSelfReceivingEnabled *bool    `protobuf:"varint,1,opt,name=send_tab_to_self_receiving_enabled,json=sendTabToSelfReceivingEnabled" json:"send_tab_to_self_receiving_enabled,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *FeatureSpecificFields) Reset()         { *m = FeatureSpecificFields{} }
func (m *FeatureSpecificFields) String() string { return proto.CompactTextString(m) }
func (*FeatureSpecificFields) ProtoMessage()    {}
func (*FeatureSpecificFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_199d98dfb54dc818, []int{1}
}

func (m *FeatureSpecificFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureSpecificFields.Unmarshal(m, b)
}
func (m *FeatureSpecificFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureSpecificFields.Marshal(b, m, deterministic)
}
func (m *FeatureSpecificFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureSpecificFields.Merge(m, src)
}
func (m *FeatureSpecificFields) XXX_Size() int {
	return xxx_messageInfo_FeatureSpecificFields.Size(m)
}
func (m *FeatureSpecificFields) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureSpecificFields.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureSpecificFields proto.InternalMessageInfo

func (m *FeatureSpecificFields) GetSendTabToSelfReceivingEnabled() bool {
	if m != nil && m.SendTabToSelfReceivingEnabled != nil {
		return *m.SendTabToSelfReceivingEnabled
	}
	return false
}

// Device specific information for Sharing feature. Used to send end-to-end
// encrypted message through FCM to other devices.
type SharingSpecificFields struct {
	// FCM registration token of device subscribed using VAPID key.
	// TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
	VapidFcmToken *string `protobuf:"bytes,1,opt,name=vapid_fcm_token,json=vapidFcmToken" json:"vapid_fcm_token,omitempty"`
	// Public key for message encryption [RFC8291] using VAPID key.
	// TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
	VapidP256Dh []byte `protobuf:"bytes,2,opt,name=vapid_p256dh,json=vapidP256dh" json:"vapid_p256dh,omitempty"`
	// Auth secret for message encryption [RFC8291] using VAPID key.
	// TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
	VapidAuthSecret []byte `protobuf:"bytes,3,opt,name=vapid_auth_secret,json=vapidAuthSecret" json:"vapid_auth_secret,omitempty"`
	// A list of enabled Sharing features.
	EnabledFeatures []SharingSpecificFields_EnabledFeatures `protobuf:"varint,4,rep,name=enabled_features,json=enabledFeatures,enum=sync_pb.SharingSpecificFields_EnabledFeatures" json:"enabled_features,omitempty"`
	// Deprecated. Use sender_id_fcm_token_v2 for new clients.
	SenderIdFcmTokenDeprecated *string `protobuf:"bytes,5,opt,name=sender_id_fcm_token_deprecated,json=senderIdFcmTokenDeprecated" json:"sender_id_fcm_token_deprecated,omitempty"` // Deprecated: Do not use.
	// Deprecated. Use sender_id_p256dh_v2 for new clients.
	SenderIdP256DhDeprecated []byte `protobuf:"bytes,6,opt,name=sender_id_p256dh_deprecated,json=senderIdP256dhDeprecated" json:"sender_id_p256dh_deprecated,omitempty"` // Deprecated: Do not use.
	// Deprecated. Use sender_id_auth_secret_v2 for new clients.
	SenderIdAuthSecretDeprecated []byte `protobuf:"bytes,7,opt,name=sender_id_auth_secret_deprecated,json=senderIdAuthSecretDeprecated" json:"sender_id_auth_secret_deprecated,omitempty"` // Deprecated: Do not use.
	// FCM registration token of device subscribed using Sharing sender ID.
	SenderIdFcmTokenV2 *string `protobuf:"bytes,8,opt,name=sender_id_fcm_token_v2,json=senderIdFcmTokenV2" json:"sender_id_fcm_token_v2,omitempty"`
	// Public key for message encryption [RFC8291] using Sharing sender ID.
	SenderIdP256DhV2 []byte `protobuf:"bytes,9,opt,name=sender_id_p256dh_v2,json=senderIdP256dhV2" json:"sender_id_p256dh_v2,omitempty"`
	// Auth secret for message encryption [RFC8291] using Sharing sender ID.
	SenderIdAuthSecretV2 []byte   `protobuf:"bytes,10,opt,name=sender_id_auth_secret_v2,json=senderIdAuthSecretV2" json:"sender_id_auth_secret_v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharingSpecificFields) Reset()         { *m = SharingSpecificFields{} }
func (m *SharingSpecificFields) String() string { return proto.CompactTextString(m) }
func (*SharingSpecificFields) ProtoMessage()    {}
func (*SharingSpecificFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_199d98dfb54dc818, []int{2}
}

func (m *SharingSpecificFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharingSpecificFields.Unmarshal(m, b)
}
func (m *SharingSpecificFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharingSpecificFields.Marshal(b, m, deterministic)
}
func (m *SharingSpecificFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharingSpecificFields.Merge(m, src)
}
func (m *SharingSpecificFields) XXX_Size() int {
	return xxx_messageInfo_SharingSpecificFields.Size(m)
}
func (m *SharingSpecificFields) XXX_DiscardUnknown() {
	xxx_messageInfo_SharingSpecificFields.DiscardUnknown(m)
}

var xxx_messageInfo_SharingSpecificFields proto.InternalMessageInfo

func (m *SharingSpecificFields) GetVapidFcmToken() string {
	if m != nil && m.VapidFcmToken != nil {
		return *m.VapidFcmToken
	}
	return ""
}

func (m *SharingSpecificFields) GetVapidP256Dh() []byte {
	if m != nil {
		return m.VapidP256Dh
	}
	return nil
}

func (m *SharingSpecificFields) GetVapidAuthSecret() []byte {
	if m != nil {
		return m.VapidAuthSecret
	}
	return nil
}

func (m *SharingSpecificFields) GetEnabledFeatures() []SharingSpecificFields_EnabledFeatures {
	if m != nil {
		return m.EnabledFeatures
	}
	return nil
}

// Deprecated: Do not use.
func (m *SharingSpecificFields) GetSenderIdFcmTokenDeprecated() string {
	if m != nil && m.SenderIdFcmTokenDeprecated != nil {
		return *m.SenderIdFcmTokenDeprecated
	}
	return ""
}

// Deprecated: Do not use.
func (m *SharingSpecificFields) GetSenderIdP256DhDeprecated() []byte {
	if m != nil {
		return m.SenderIdP256DhDeprecated
	}
	return nil
}

// Deprecated: Do not use.
func (m *SharingSpecificFields) GetSenderIdAuthSecretDeprecated() []byte {
	if m != nil {
		return m.SenderIdAuthSecretDeprecated
	}
	return nil
}

func (m *SharingSpecificFields) GetSenderIdFcmTokenV2() string {
	if m != nil && m.SenderIdFcmTokenV2 != nil {
		return *m.SenderIdFcmTokenV2
	}
	return ""
}

func (m *SharingSpecificFields) GetSenderIdP256DhV2() []byte {
	if m != nil {
		return m.SenderIdP256DhV2
	}
	return nil
}

func (m *SharingSpecificFields) GetSenderIdAuthSecretV2() []byte {
	if m != nil {
		return m.SenderIdAuthSecretV2
	}
	return nil
}

func init() {
	proto.RegisterEnum("sync_pb.SharingSpecificFields_EnabledFeatures", SharingSpecificFields_EnabledFeatures_name, SharingSpecificFields_EnabledFeatures_value)
	proto.RegisterType((*DeviceInfoSpecifics)(nil), "sync_pb.DeviceInfoSpecifics")
	proto.RegisterType((*FeatureSpecificFields)(nil), "sync_pb.FeatureSpecificFields")
	proto.RegisterType((*SharingSpecificFields)(nil), "sync_pb.SharingSpecificFields")
}

func init() {
	proto.RegisterFile("device_info_specifics.proto", fileDescriptor_199d98dfb54dc818)
}

var fileDescriptor_199d98dfb54dc818 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xed, 0x6e, 0xe2, 0x46,
	0x14, 0xad, 0xf3, 0x45, 0x18, 0x20, 0xb8, 0x13, 0x36, 0xeb, 0xcd, 0x36, 0x5b, 0x8a, 0xb4, 0x15,
	0x6a, 0x55, 0x7e, 0x58, 0xdd, 0x95, 0xfa, 0xa7, 0x12, 0x1f, 0xa6, 0x71, 0x37, 0x01, 0x34, 0x26,
	0x54, 0xf9, 0x35, 0x32, 0xe3, 0x0b, 0x58, 0x6b, 0x8f, 0x2d, 0x8f, 0x8d, 0x94, 0x37, 0xe9, 0x13,
	0xf4, 0x59, 0xfa, 0x58, 0x95, 0x67, 0xcc, 0x47, 0x48, 0xd4, 0x7f, 0xf8, 0x9c, 0x33, 0xe7, 0xde,
	0x73, 0x67, 0x6e, 0x82, 0xde, 0x7b, 0xb0, 0xf6, 0x19, 0x50, 0x9f, 0x2f, 0x22, 0x2a, 0x62, 0x60,
	0xfe, 0xc2, 0x67, 0xa2, 0x13, 0x27, 0x51, 0x1a, 0xe1, 0x92, 0x78, 0xe2, 0x8c, 0xc6, 0xf3, 0x6b,
	0x5d, 0xfe, 0x00, 0x9e, 0x85, 0x05, 0xd5, 0xfa, 0xfb, 0x14, 0x5d, 0x0e, 0xe4, 0x51, 0x9b, 0x2f,
	0x22, 0x67, 0x73, 0x10, 0xdf, 0x20, 0xc4, 0x5c, 0xb6, 0x02, 0xba, 0xcc, 0x7c, 0xcf, 0xd0, 0x9a,
	0x5a, 0xbb, 0x4c, 0xca, 0x12, 0xf9, 0x23, 0xf3, 0x3d, 0xfc, 0x3d, 0xaa, 0xb0, 0xc0, 0x07, 0x9e,
	0x52, 0xee, 0x86, 0x60, 0x1c, 0x49, 0x1e, 0x29, 0x68, 0xe4, 0x86, 0x80, 0x7f, 0x47, 0x95, 0xa2,
	0xa3, 0xf4, 0x29, 0x06, 0xe3, 0xb8, 0xa9, 0xb5, 0x2f, 0xcc, 0x9b, 0x4e, 0xd1, 0x48, 0xc7, 0x79,
	0xe2, 0xcc, 0x92, 0x6d, 0xa8, 0xe2, 0xd3, 0xa7, 0x18, 0x08, 0xf2, 0xb6, 0xbf, 0xf1, 0x8f, 0xa8,
	0x2e, 0xb5, 0x99, 0x80, 0x84, 0xba, 0x4b, 0xe0, 0xa9, 0x71, 0x22, 0x8b, 0xd4, 0x72, 0xf8, 0x41,
	0x40, 0xd2, 0xcd, 0x41, 0xfc, 0x11, 0x5d, 0xb0, 0x55, 0x12, 0x85, 0x40, 0xd7, 0x90, 0x08, 0x3f,
	0xe2, 0xc6, 0xa9, 0x92, 0x29, 0x74, 0xa6, 0x40, 0xdc, 0xcb, 0x07, 0x14, 0x27, 0xc0, 0xdc, 0x14,
	0x3c, 0x3a, 0x77, 0xd9, 0xd7, 0x2c, 0xa6, 0xa9, 0x1f, 0x82, 0x48, 0xdd, 0x30, 0x36, 0xce, 0x9a,
	0x5a, 0xfb, 0xb8, 0x77, 0x64, 0x68, 0xe4, 0xdd, 0x4e, 0xd6, 0x93, 0xaa, 0xe9, 0x46, 0x84, 0x3f,
	0xa1, 0xb7, 0xc2, 0x5f, 0x72, 0x9f, 0x53, 0xc1, 0xa2, 0x18, 0x3c, 0xba, 0x19, 0xb9, 0x67, 0x94,
	0x64, 0xcd, 0x86, 0xa2, 0x1d, 0xc9, 0x16, 0x43, 0xf5, 0xf0, 0xaf, 0xe8, 0x2a, 0x70, 0x45, 0x4a,
	0xb3, 0xd8, 0x93, 0xc5, 0x77, 0x55, 0xcf, 0xf3, 0xaa, 0xa4, 0x91, 0xb3, 0x0f, 0x8a, 0xdc, 0x15,
	0xb3, 0xd0, 0xc5, 0x02, 0xdc, 0x34, 0x4b, 0x80, 0x2e, 0x7c, 0x08, 0x3c, 0x61, 0x94, 0x9b, 0x5a,
	0xbb, 0x62, 0x7e, 0xd8, 0x8e, 0x70, 0xa8, 0xe8, 0xcd, 0x95, 0x0d, 0xa5, 0x8a, 0xd4, 0x8a, 0x53,
	0xea, 0x33, 0xb7, 0x11, 0x2b, 0x37, 0xf1, 0xf9, 0x72, 0x63, 0x83, 0x0e, 0x6c, 0x1c, 0x45, 0x1f,
	0xda, 0x14, 0xa7, 0x0a, 0x9b, 0x06, 0x3a, 0x0d, 0x23, 0x0f, 0x02, 0xa3, 0x22, 0x83, 0xaa, 0x0f,
	0xdc, 0x42, 0xd5, 0xd0, 0xe5, 0xd9, 0xc2, 0x65, 0x79, 0xc5, 0xc4, 0xa8, 0x4a, 0xf2, 0x19, 0x86,
	0x7f, 0x43, 0xef, 0xe2, 0x2c, 0x10, 0xf9, 0xc3, 0x4c, 0x21, 0x59, 0xbb, 0x01, 0xf5, 0x39, 0x0d,
	0x7d, 0x9e, 0xa5, 0x20, 0x8c, 0x5a, 0x53, 0x6b, 0x9f, 0x92, 0x2b, 0x29, 0xb0, 0x0b, 0xde, 0xe6,
	0xf7, 0x8a, 0x6d, 0xcd, 0xd1, 0x9b, 0x57, 0x33, 0x62, 0x1b, 0xb5, 0x04, 0x70, 0x8f, 0xa6, 0xee,
	0x9c, 0xa6, 0x11, 0x15, 0x10, 0x2c, 0x68, 0x02, 0x0c, 0xfc, 0x75, 0x9e, 0x13, 0xb8, 0x3b, 0x0f,
	0x40, 0xbd, 0xd9, 0x73, 0x72, 0x93, 0x2b, 0xa7, 0xee, 0x7c, 0x1a, 0x39, 0x10, 0x2c, 0xc8, 0x46,
	0x65, 0x29, 0x51, 0xeb, 0x9f, 0x33, 0xf4, 0xe6, 0xd5, 0x09, 0xe4, 0x0f, 0x70, 0xed, 0xc6, 0xbe,
	0x47, 0x17, 0x2c, 0xa4, 0x69, 0xf4, 0x15, 0x78, 0xb1, 0x05, 0x35, 0x09, 0x0f, 0x59, 0x38, 0xcd,
	0x41, 0xfc, 0x03, 0xaa, 0x2a, 0x5d, 0x6c, 0x7e, 0xfa, 0xec, 0xad, 0xe4, 0x2a, 0x54, 0x49, 0x45,
	0x62, 0x13, 0x09, 0xe1, 0x9f, 0xd0, 0xb7, 0x4a, 0xe2, 0x66, 0xe9, 0x8a, 0x0a, 0x60, 0x09, 0xa4,
	0x72, 0x23, 0xaa, 0x44, 0xd5, 0xe8, 0x66, 0xe9, 0xca, 0x91, 0x30, 0x7e, 0x44, 0x7a, 0x11, 0x80,
	0x16, 0x37, 0x29, 0x8c, 0x93, 0xe6, 0x71, 0xfb, 0xc2, 0xec, 0xfc, 0xff, 0x95, 0x75, 0x8a, 0x48,
	0xc5, 0xc8, 0x04, 0xa9, 0xc3, 0x73, 0x00, 0x0f, 0xd1, 0x87, 0x7c, 0x18, 0x90, 0xd0, 0xfd, 0x54,
	0x74, 0xf7, 0xe0, 0xd5, 0xea, 0xc8, 0x35, 0xb8, 0x56, 0x4a, 0x7b, 0x9b, 0x73, 0xb0, 0x55, 0xe1,
	0x2e, 0x7a, 0xbf, 0xf3, 0x51, 0xa9, 0xf7, 0x4d, 0xf2, 0x5d, 0xaa, 0x4a, 0x13, 0x63, 0x63, 0xa2,
	0xe6, 0xb0, 0x67, 0xf1, 0x27, 0x6a, 0xee, 0x2c, 0xf6, 0xa6, 0xb2, 0xef, 0x53, 0xda, 0xfa, 0x7c,
	0xb7, 0xf1, 0xd9, 0xcd, 0x69, 0xcf, 0xcb, 0x44, 0x57, 0xaf, 0xc5, 0x5a, 0x9b, 0x72, 0xbf, 0xca,
	0x04, 0x1f, 0x46, 0x99, 0x99, 0xf8, 0x17, 0x74, 0xf9, 0x22, 0xc2, 0xda, 0x94, 0x2b, 0x56, 0x25,
	0xfa, 0xf3, 0xb6, 0x67, 0x26, 0xfe, 0x8c, 0x8c, 0xd7, 0xdb, 0x5d, 0x9b, 0x72, 0x9f, 0xaa, 0xa4,
	0xf1, 0xb2, 0xc5, 0x99, 0xd9, 0xfa, 0x57, 0x43, 0xf5, 0x83, 0x6b, 0xc1, 0x15, 0x54, 0x7a, 0x18,
	0x7d, 0x19, 0x8d, 0xff, 0x1a, 0xe9, 0xdf, 0xe0, 0xb7, 0xe8, 0xb2, 0x7f, 0x67, 0xf7, 0xbf, 0xd0,
	0xe9, 0x98, 0xf6, 0xbb, 0x77, 0x77, 0x74, 0xd6, 0x9d, 0xd8, 0x03, 0x5d, 0xc3, 0xd7, 0xe8, 0xca,
	0xb9, 0xed, 0x12, 0x6b, 0x40, 0xfb, 0x77, 0xf6, 0xa4, 0x37, 0xee, 0x92, 0x41, 0xc1, 0x1d, 0xe1,
	0x3a, 0xaa, 0x38, 0xf7, 0x0e, 0x1d, 0x5a, 0xd3, 0xfe, 0xad, 0x45, 0xf4, 0xe3, 0x1c, 0x20, 0xd6,
	0xfd, 0x78, 0x6a, 0xd1, 0xfe, 0x78, 0xf2, 0xa8, 0x9f, 0xe0, 0x4b, 0x54, 0x9f, 0x58, 0x16, 0xa1,
	0xfd, 0xf1, 0x68, 0x64, 0xf5, 0xa7, 0xf6, 0x78, 0xa4, 0x9f, 0xe2, 0x1a, 0x2a, 0x0f, 0x6c, 0xa7,
	0x3f, 0x9e, 0x59, 0xe4, 0x51, 0x3f, 0xc3, 0x0d, 0xa4, 0x1f, 0x94, 0x36, 0xf5, 0x52, 0xde, 0xd0,
	0xcb, 0xba, 0xa6, 0x7e, 0xde, 0xfb, 0x19, 0x7d, 0x8c, 0x92, 0x65, 0x47, 0xfe, 0x55, 0xf5, 0xb3,
	0xb0, 0xc3, 0xa2, 0x30, 0x8e, 0x38, 0xf0, 0x54, 0xc8, 0x67, 0xa9, 0xfe, 0x9b, 0xb0, 0x28, 0xb8,
	0x3d, 0x9e, 0x68, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x68, 0xd1, 0x80, 0x4f, 0x8d, 0x06, 0x00,
	0x00,
}
