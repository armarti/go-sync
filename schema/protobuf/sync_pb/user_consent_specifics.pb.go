// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user_consent_specifics.proto

package sync_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Which feature does the consent apply to?
type UserConsentSpecifics_Feature int32

const (
	UserConsentSpecifics_FEATURE_UNSPECIFIED     UserConsentSpecifics_Feature = 0
	UserConsentSpecifics_CHROME_SYNC             UserConsentSpecifics_Feature = 1
	UserConsentSpecifics_PLAY_STORE              UserConsentSpecifics_Feature = 2
	UserConsentSpecifics_BACKUP_AND_RESTORE      UserConsentSpecifics_Feature = 3
	UserConsentSpecifics_GOOGLE_LOCATION_SERVICE UserConsentSpecifics_Feature = 4
	UserConsentSpecifics_CHROME_UNIFIED_CONSENT  UserConsentSpecifics_Feature = 5
	// TODO(markusheintz): ASSISTANT_ACTIVITY_CONTROL was only added for
	// compatibility with the Feature enum in UserEventSpecifics.UserConsent.
	// Delete this value once the value is deleted from the other proto.
	UserConsentSpecifics_ASSISTANT_ACTIVITY_CONTROL UserConsentSpecifics_Feature = 6
)

var UserConsentSpecifics_Feature_name = map[int32]string{
	0: "FEATURE_UNSPECIFIED",
	1: "CHROME_SYNC",
	2: "PLAY_STORE",
	3: "BACKUP_AND_RESTORE",
	4: "GOOGLE_LOCATION_SERVICE",
	5: "CHROME_UNIFIED_CONSENT",
	6: "ASSISTANT_ACTIVITY_CONTROL",
}

var UserConsentSpecifics_Feature_value = map[string]int32{
	"FEATURE_UNSPECIFIED":        0,
	"CHROME_SYNC":                1,
	"PLAY_STORE":                 2,
	"BACKUP_AND_RESTORE":         3,
	"GOOGLE_LOCATION_SERVICE":    4,
	"CHROME_UNIFIED_CONSENT":     5,
	"ASSISTANT_ACTIVITY_CONTROL": 6,
}

func (x UserConsentSpecifics_Feature) Enum() *UserConsentSpecifics_Feature {
	p := new(UserConsentSpecifics_Feature)
	*p = x
	return p
}

func (x UserConsentSpecifics_Feature) String() string {
	return proto.EnumName(UserConsentSpecifics_Feature_name, int32(x))
}

func (x *UserConsentSpecifics_Feature) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserConsentSpecifics_Feature_value, data, "UserConsentSpecifics_Feature")
	if err != nil {
		return err
	}
	*x = UserConsentSpecifics_Feature(value)
	return nil
}

func (UserConsentSpecifics_Feature) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6b50c642112bbb1a, []int{0, 0}
}

// Next id: 14
type UserConsentSpecifics struct {
	// The UI language Chrome is using, represented as the IETF language tag
	// defined in BCP 47. The region subtag is not included when it adds no
	// distinguishing information to the language tag (e.g. both "en-US"
	// and "fr" are correct here).
	Locale *string `protobuf:"bytes,4,opt,name=locale" json:"locale,omitempty"`
	// The local time on the client when the user consent was recorded. The time
	// as measured by client is given in microseconds since Windows epoch. This
	// is needed since user consent recording may happen when a client is
	// offline.
	ClientConsentTimeUsec *int64 `protobuf:"varint,12,opt,name=client_consent_time_usec,json=clientConsentTimeUsec" json:"client_consent_time_usec,omitempty"`
	// Types that are valid to be assigned to Consent:
	//	*UserConsentSpecifics_SyncConsent
	//	*UserConsentSpecifics_ArcBackupAndRestoreConsent
	//	*UserConsentSpecifics_ArcLocationServiceConsent
	//	*UserConsentSpecifics_ArcPlayTermsOfServiceConsent
	//	*UserConsentSpecifics_UnifiedConsent
	//	*UserConsentSpecifics_AssistantActivityControlConsent
	Consent isUserConsentSpecifics_Consent `protobuf_oneof:"consent"`
	// The account ID of the user who gave the consent. This field is used
	// by UserEventService to distinguish consents from different users,
	// as UserConsent does not get deleted when a user signs out. However,
	// it should be cleared before being sent over the wire, as the UserEvent
	// is sent over an authenticated channel, so this information would be
	// redundant.
	//
	// For semantics and usage of the |account_id| in the signin codebase,
	// see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
	AccountId *string                       `protobuf:"bytes,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Feature   *UserConsentSpecifics_Feature `protobuf:"varint,1,opt,name=feature,enum=sync_pb.UserConsentSpecifics_Feature" json:"feature,omitempty"` // Deprecated: Do not use.
	// Ids of the strings of the consent text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,2,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"` // Deprecated: Do not use.
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId *int32 `protobuf:"varint,3,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"` // Deprecated: Do not use.
	// Was the consent for |feature| given or not given (denied/revoked)?
	Status               *UserConsentTypes_ConsentStatus `protobuf:"varint,5,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UserConsentSpecifics) Reset()         { *m = UserConsentSpecifics{} }
func (m *UserConsentSpecifics) String() string { return proto.CompactTextString(m) }
func (*UserConsentSpecifics) ProtoMessage()    {}
func (*UserConsentSpecifics) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b50c642112bbb1a, []int{0}
}

func (m *UserConsentSpecifics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserConsentSpecifics.Unmarshal(m, b)
}
func (m *UserConsentSpecifics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserConsentSpecifics.Marshal(b, m, deterministic)
}
func (m *UserConsentSpecifics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConsentSpecifics.Merge(m, src)
}
func (m *UserConsentSpecifics) XXX_Size() int {
	return xxx_messageInfo_UserConsentSpecifics.Size(m)
}
func (m *UserConsentSpecifics) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConsentSpecifics.DiscardUnknown(m)
}

var xxx_messageInfo_UserConsentSpecifics proto.InternalMessageInfo

func (m *UserConsentSpecifics) GetLocale() string {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return ""
}

func (m *UserConsentSpecifics) GetClientConsentTimeUsec() int64 {
	if m != nil && m.ClientConsentTimeUsec != nil {
		return *m.ClientConsentTimeUsec
	}
	return 0
}

type isUserConsentSpecifics_Consent interface {
	isUserConsentSpecifics_Consent()
}

type UserConsentSpecifics_SyncConsent struct {
	SyncConsent *UserConsentTypes_SyncConsent `protobuf:"bytes,7,opt,name=sync_consent,json=syncConsent,oneof"`
}

type UserConsentSpecifics_ArcBackupAndRestoreConsent struct {
	ArcBackupAndRestoreConsent *UserConsentTypes_ArcBackupAndRestoreConsent `protobuf:"bytes,8,opt,name=arc_backup_and_restore_consent,json=arcBackupAndRestoreConsent,oneof"`
}

type UserConsentSpecifics_ArcLocationServiceConsent struct {
	ArcLocationServiceConsent *UserConsentTypes_ArcGoogleLocationServiceConsent `protobuf:"bytes,9,opt,name=arc_location_service_consent,json=arcLocationServiceConsent,oneof"`
}

type UserConsentSpecifics_ArcPlayTermsOfServiceConsent struct {
	ArcPlayTermsOfServiceConsent *UserConsentTypes_ArcPlayTermsOfServiceConsent `protobuf:"bytes,10,opt,name=arc_play_terms_of_service_consent,json=arcPlayTermsOfServiceConsent,oneof"`
}

type UserConsentSpecifics_UnifiedConsent struct {
	UnifiedConsent *UserConsentTypes_UnifiedConsent `protobuf:"bytes,13,opt,name=unified_consent,json=unifiedConsent,oneof"`
}

type UserConsentSpecifics_AssistantActivityControlConsent struct {
	AssistantActivityControlConsent *UserConsentTypes_AssistantActivityControlConsent `protobuf:"bytes,14,opt,name=assistant_activity_control_consent,json=assistantActivityControlConsent,oneof"`
}

func (*UserConsentSpecifics_SyncConsent) isUserConsentSpecifics_Consent() {}

func (*UserConsentSpecifics_ArcBackupAndRestoreConsent) isUserConsentSpecifics_Consent() {}

func (*UserConsentSpecifics_ArcLocationServiceConsent) isUserConsentSpecifics_Consent() {}

func (*UserConsentSpecifics_ArcPlayTermsOfServiceConsent) isUserConsentSpecifics_Consent() {}

func (*UserConsentSpecifics_UnifiedConsent) isUserConsentSpecifics_Consent() {}

func (*UserConsentSpecifics_AssistantActivityControlConsent) isUserConsentSpecifics_Consent() {}

func (m *UserConsentSpecifics) GetConsent() isUserConsentSpecifics_Consent {
	if m != nil {
		return m.Consent
	}
	return nil
}

func (m *UserConsentSpecifics) GetSyncConsent() *UserConsentTypes_SyncConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_SyncConsent); ok {
		return x.SyncConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetArcBackupAndRestoreConsent() *UserConsentTypes_ArcBackupAndRestoreConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_ArcBackupAndRestoreConsent); ok {
		return x.ArcBackupAndRestoreConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetArcLocationServiceConsent() *UserConsentTypes_ArcGoogleLocationServiceConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_ArcLocationServiceConsent); ok {
		return x.ArcLocationServiceConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetArcPlayTermsOfServiceConsent() *UserConsentTypes_ArcPlayTermsOfServiceConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_ArcPlayTermsOfServiceConsent); ok {
		return x.ArcPlayTermsOfServiceConsent
	}
	return nil
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetUnifiedConsent() *UserConsentTypes_UnifiedConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_UnifiedConsent); ok {
		return x.UnifiedConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetAssistantActivityControlConsent() *UserConsentTypes_AssistantActivityControlConsent {
	if x, ok := m.GetConsent().(*UserConsentSpecifics_AssistantActivityControlConsent); ok {
		return x.AssistantActivityControlConsent
	}
	return nil
}

func (m *UserConsentSpecifics) GetAccountId() string {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return ""
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetFeature() UserConsentSpecifics_Feature {
	if m != nil && m.Feature != nil {
		return *m.Feature
	}
	return UserConsentSpecifics_FEATURE_UNSPECIFIED
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetDescriptionGrdIds() []int32 {
	if m != nil {
		return m.DescriptionGrdIds
	}
	return nil
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetConfirmationGrdId() int32 {
	if m != nil && m.ConfirmationGrdId != nil {
		return *m.ConfirmationGrdId
	}
	return 0
}

// Deprecated: Do not use.
func (m *UserConsentSpecifics) GetStatus() UserConsentTypes_ConsentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserConsentSpecifics) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserConsentSpecifics_SyncConsent)(nil),
		(*UserConsentSpecifics_ArcBackupAndRestoreConsent)(nil),
		(*UserConsentSpecifics_ArcLocationServiceConsent)(nil),
		(*UserConsentSpecifics_ArcPlayTermsOfServiceConsent)(nil),
		(*UserConsentSpecifics_UnifiedConsent)(nil),
		(*UserConsentSpecifics_AssistantActivityControlConsent)(nil),
	}
}

func init() {
	proto.RegisterEnum("sync_pb.UserConsentSpecifics_Feature", UserConsentSpecifics_Feature_name, UserConsentSpecifics_Feature_value)
	proto.RegisterType((*UserConsentSpecifics)(nil), "sync_pb.UserConsentSpecifics")
}

func init() {
	proto.RegisterFile("user_consent_specifics.proto", fileDescriptor_6b50c642112bbb1a)
}

var fileDescriptor_6b50c642112bbb1a = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x9b, 0x36, 0xd9, 0x4c, 0x4a, 0x36, 0xcc, 0x42, 0xd7, 0x84, 0xdd, 0x25, 0x54, 0x5a,
	0x11, 0x09, 0x29, 0x87, 0x0a, 0x81, 0x38, 0x3a, 0xae, 0x9b, 0xb8, 0x04, 0x3b, 0xb2, 0x9d, 0xa2,
	0x9e, 0x46, 0xd3, 0xf1, 0x24, 0x8c, 0xb0, 0x3d, 0xd6, 0xcc, 0xb8, 0x52, 0x10, 0x17, 0x6e, 0x5c,
	0xf8, 0x36, 0x7c, 0x40, 0xe4, 0xb1, 0xf3, 0xa7, 0x6a, 0xd3, 0x3d, 0xfa, 0xfd, 0xde, 0xef, 0xcf,
	0x7b, 0x9a, 0x67, 0xf0, 0xae, 0x90, 0x54, 0x20, 0xc2, 0x33, 0x49, 0x33, 0x85, 0x64, 0x4e, 0x09,
	0x5b, 0x32, 0x22, 0x47, 0xb9, 0xe0, 0x8a, 0xc3, 0x96, 0x5c, 0x67, 0x04, 0xe5, 0xf7, 0x7d, 0xf3,
	0x51, 0x9b, 0x5a, 0xe7, 0xb4, 0x6e, 0xb9, 0xf8, 0x17, 0x80, 0x2f, 0x16, 0x92, 0x0a, 0xbb, 0xc2,
	0xc2, 0x8d, 0x02, 0x3c, 0x07, 0xcd, 0x84, 0x13, 0x9c, 0x50, 0xf3, 0x64, 0x60, 0x0c, 0xdb, 0x41,
	0xfd, 0x05, 0x7f, 0x02, 0x26, 0x49, 0x58, 0x29, 0xb3, 0x95, 0x63, 0x29, 0x45, 0x85, 0xa4, 0xc4,
	0x3c, 0x1b, 0x18, 0xc3, 0x46, 0xf0, 0x65, 0x85, 0xd7, 0x8a, 0x11, 0x4b, 0xe9, 0x42, 0x52, 0x02,
	0x6f, 0xc0, 0x99, 0x8e, 0x53, 0xd3, 0xcc, 0xd6, 0xc0, 0x18, 0x76, 0x2e, 0x3f, 0x8e, 0xea, 0x8c,
	0xa3, 0xbd, 0x14, 0x91, 0x0e, 0x18, 0xae, 0x33, 0x52, 0x17, 0xa6, 0x47, 0x41, 0x47, 0xee, 0x3e,
	0xe1, 0x9f, 0xe0, 0x03, 0x16, 0x04, 0xdd, 0x63, 0xf2, 0x47, 0x91, 0x23, 0x9c, 0xc5, 0x48, 0x50,
	0xa9, 0xb8, 0xa0, 0x5b, 0xf5, 0x57, 0x5a, 0xfd, 0x87, 0xc3, 0xea, 0x96, 0x20, 0x63, 0x4d, 0xb7,
	0xb2, 0x38, 0xa8, 0xc8, 0x3b, 0xb3, 0x3e, 0x3e, 0x88, 0xc2, 0xbf, 0xc0, 0xbb, 0xd2, 0xbb, 0x5c,
	0x87, 0x62, 0x3c, 0x43, 0x92, 0x8a, 0x07, 0x46, 0x76, 0xce, 0x6d, 0xed, 0xfc, 0xf3, 0x8b, 0xce,
	0x13, 0xce, 0x57, 0x09, 0x9d, 0xd5, 0x12, 0x61, 0xa5, 0xb0, 0xb3, 0xff, 0x0a, 0x0b, 0xf2, 0x3c,
	0x08, 0xff, 0x36, 0xc0, 0xb7, 0xa5, 0x7d, 0x9e, 0xe0, 0x35, 0x52, 0x54, 0xa4, 0x12, 0xf1, 0xe5,
	0x93, 0x0c, 0x40, 0x67, 0xf8, 0xf1, 0xc5, 0x0c, 0xf3, 0x04, 0xaf, 0xa3, 0x52, 0xc0, 0x5f, 0x3e,
	0x09, 0x50, 0x4e, 0x78, 0x10, 0x87, 0xbf, 0x81, 0xd7, 0x45, 0xc6, 0x96, 0x8c, 0xc6, 0x5b, 0xc3,
	0xcf, 0xb4, 0xe1, 0xf0, 0xb0, 0xe1, 0xa2, 0x22, 0xd4, 0xb5, 0xf1, 0xb1, 0x69, 0x4c, 0x8f, 0x82,
	0x6e, 0xf1, 0xa8, 0x0a, 0xff, 0x31, 0xc0, 0x05, 0x96, 0x92, 0x49, 0x85, 0x33, 0x85, 0x30, 0x51,
	0xec, 0x81, 0xa9, 0x75, 0x69, 0xa2, 0x04, 0x4f, 0xb6, 0x66, 0xdd, 0x4f, 0x6e, 0x78, 0xa3, 0x61,
	0xd5, 0x12, 0x76, 0xa5, 0xb0, 0x1b, 0xf0, 0x1b, 0xfc, 0x72, 0x0b, 0x7c, 0x0f, 0x00, 0x26, 0x84,
	0x17, 0x99, 0x42, 0x2c, 0x36, 0x9b, 0xfa, 0x04, 0xda, 0x75, 0xc5, 0x8d, 0xa1, 0x0d, 0x5a, 0x4b,
	0x8a, 0x55, 0x21, 0xa8, 0x69, 0x0c, 0x8c, 0x61, 0xf7, 0xf9, 0x77, 0xbc, 0xbd, 0xa6, 0xd1, 0x75,
	0xd5, 0x5c, 0xce, 0x1d, 0x6c, 0x98, 0xf0, 0x12, 0xbc, 0x89, 0xa9, 0x24, 0x82, 0xe5, 0xfa, 0x21,
	0xad, 0x44, 0x8c, 0x58, 0x2c, 0xcd, 0xe3, 0x41, 0x63, 0x78, 0xaa, 0x3b, 0x3f, 0xdf, 0x83, 0x27,
	0x22, 0x76, 0x63, 0x59, 0x72, 0x08, 0xcf, 0x96, 0x4c, 0xa4, 0x78, 0x8f, 0x64, 0x36, 0x06, 0xc6,
	0x86, 0xb3, 0x0f, 0x6b, 0x12, 0xb4, 0x41, 0x53, 0x2a, 0xac, 0x0a, 0x69, 0x9e, 0xea, 0xac, 0xdf,
	0x1d, 0xde, 0xdc, 0x26, 0xb8, 0x6e, 0xd7, 0x7a, 0x35, 0xf5, 0xe2, 0x3f, 0x03, 0xb4, 0xea, 0x29,
	0xe0, 0x5b, 0xf0, 0xe6, 0xda, 0xb1, 0xa2, 0x45, 0xe0, 0xa0, 0x85, 0x17, 0xce, 0x1d, 0xdb, 0xbd,
	0x76, 0x9d, 0xab, 0xde, 0x11, 0x7c, 0x0d, 0x3a, 0xf6, 0x34, 0xf0, 0x7f, 0x75, 0x50, 0x78, 0xe7,
	0xd9, 0x3d, 0x03, 0x76, 0x01, 0x98, 0xcf, 0xac, 0x3b, 0x14, 0x46, 0x7e, 0xe0, 0xf4, 0x8e, 0xe1,
	0x39, 0x80, 0x63, 0xcb, 0xfe, 0x65, 0x31, 0x47, 0x96, 0x77, 0x85, 0x02, 0xa7, 0xaa, 0x37, 0xe0,
	0xd7, 0xe0, 0xed, 0xc4, 0xf7, 0x27, 0x33, 0x07, 0xcd, 0x7c, 0xdb, 0x8a, 0x5c, 0xdf, 0x43, 0xa1,
	0x13, 0xdc, 0xba, 0xb6, 0xd3, 0x3b, 0x81, 0x7d, 0x70, 0x5e, 0xab, 0x2e, 0x3c, 0xed, 0x84, 0x6c,
	0xdf, 0x0b, 0x1d, 0x2f, 0xea, 0x9d, 0xc2, 0x0f, 0xa0, 0x6f, 0x85, 0xa1, 0x1b, 0x46, 0x96, 0x17,
	0x21, 0xcb, 0x8e, 0xdc, 0x5b, 0x37, 0xba, 0x2b, 0xf1, 0x28, 0xf0, 0x67, 0xbd, 0xe6, 0xb8, 0x0d,
	0x5a, 0xf5, 0xb3, 0xb9, 0x39, 0x79, 0xd5, 0xe9, 0x9d, 0x05, 0xef, 0xcb, 0xeb, 0x49, 0xa9, 0x12,
	0x8c, 0x48, 0xfd, 0xe7, 0x28, 0x24, 0x5e, 0x6d, 0x2f, 0x67, 0xfc, 0x3d, 0xf8, 0xc8, 0xc5, 0x6a,
	0x44, 0x7e, 0x17, 0x3c, 0x65, 0x45, 0x3a, 0x22, 0x3c, 0xcd, 0x79, 0x46, 0x33, 0x25, 0xf5, 0xd2,
	0xaa, 0xbf, 0x26, 0xe1, 0xc9, 0xb4, 0x31, 0x37, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xce, 0x7c,
	0xc5, 0xcf, 0x7e, 0x05, 0x00, 0x00,
}
